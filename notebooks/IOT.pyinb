{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"L4","authorship_tag":"ABX9TyPPWcmdhIVEXzbKc3vkwsf2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1C7mow2Mzij5","executionInfo":{"status":"ok","timestamp":1760690835967,"user_tz":-420,"elapsed":1326,"user":{"displayName":"Lâm Đặng","userId":"17066101826048801505"}},"outputId":"2bae4df4-5de6-4be0-f062-484b6367e2df"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'iot-prj'...\n","remote: Enumerating objects: 110, done.\u001b[K\n","remote: Counting objects: 100% (110/110), done.\u001b[K\n","remote: Compressing objects: 100% (75/75), done.\u001b[K\n","remote: Total 110 (delta 33), reused 106 (delta 29), pack-reused 0 (from 0)\u001b[K\n","Receiving objects: 100% (110/110), 2.96 MiB | 44.62 MiB/s, done.\n","Resolving deltas: 100% (33/33), done.\n"]}],"source":["!git clone https://github.com/lamdx4/iot-prj iot-prj"]},{"cell_type":"code","source":["!pip install -q xgboost scikit-learn imbalanced-learn pandas numpy joblib psutil\n","\n","# Verify\n","import xgboost as xgb\n","print(f\"XGBoost version: {xgb.__version__}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"idnIWhq0-_22","executionInfo":{"status":"ok","timestamp":1760690843549,"user_tz":-420,"elapsed":7578,"user":{"displayName":"Lâm Đặng","userId":"17066101826048801505"}},"outputId":"5ec4e28a-3b40-4e08-afe9-0e0758ea7f61"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["XGBoost version: 3.0.5\n"]}]},{"cell_type":"code","source":["# =========================================================\n","# KÉO FILE NÉN (.7z hoặc .zip) TỪ GOOGLE DRIVE -> COLAB & GIẢI NÉN\n","# =========================================================\n","\n","from google.colab import drive\n","from pathlib import Path\n","import shutil, zipfile, sys, subprocess, os\n","\n","# ️🔧 CẦN ĐIỀN ------------------------------------------------\n","DRIVE_ARCHIVE_PATH = \"/content/drive/MyDrive/IOT prj/merged_batches.7z\"  # <-- đường dẫn file .7z hoặc .zip trong Drive\n","DEST_DIR           = \"/content/iot-prj/Data/Dataset\"                              # <-- thư mục chứa file nén sau khi copy về Colab\n","EXTRACT_DIR        = DEST_DIR                                             # <-- nơi giải nén trên Colab\n","DELETE_ARCHIVE_AFTER_EXTRACT = True                                      # <-- True nếu muốn xóa file nén sau khi giải nén\n","# ------------------------------------------------------------\n","\n","# 1) Mount Google Drive\n","print(\"🔗 Mounting Google Drive...\")\n","drive.mount('/content/drive')\n","\n","src_path     = Path(DRIVE_ARCHIVE_PATH)\n","dest_dir     = Path(DEST_DIR)\n","extract_dir  = Path(EXTRACT_DIR)\n","\n","# 2) Kiểm tra file nguồn\n","if not src_path.exists():\n","    raise FileNotFoundError(\n","        f\"Không thấy file trong Drive: {src_path}\\n\"\n","        f\"• Gợi ý: kiểm tra đúng đường dẫn bắt đầu bằng /content/drive/MyDrive/ ...\\n\"\n","        f\"• Lưu ý đuôi file phải là .7z hoặc .zip\"\n","    )\n","\n","# Tạo thư mục đích nếu chưa có\n","dest_dir.mkdir(parents=True, exist_ok=True)\n","\n","# 3) Copy file nén từ Drive về Colab\n","local_archive = dest_dir / src_path.name\n","print(f\"⬇️  Copy về Colab: {src_path} -> {local_archive}\")\n","shutil.copy2(src_path, local_archive)\n","\n","size_mb = local_archive.stat().st_size / (1024*1024)\n","print(f\"✅ Đã copy: {local_archive} ({size_mb:.2f} MB)\")\n","\n","# 4) Giải nén\n","extract_dir.mkdir(parents=True, exist_ok=True)\n","print(f\"📦 Đang giải nén vào: {extract_dir}\")\n","\n","suffix = local_archive.suffix.lower()\n","\n","def extract_7z(archive_path: Path, out_dir: Path):\n","    \"\"\"Giải nén .7z bằng py7zr (ưu tiên) hoặc lệnh 7z nếu muốn/ cần.\"\"\"\n","    try:\n","        # Thử dùng py7zr (thuần Python)\n","        import py7zr\n","    except ImportError:\n","        print(\"⏬ Cài py7zr ...\")\n","        # Cài đặt rồi import lại\n","        !pip -q install py7zr\n","        import py7zr\n","\n","    with py7zr.SevenZipFile(archive_path, mode='r') as z:\n","        z.extractall(path=out_dir)\n","\n","if suffix == \".zip\":\n","    with zipfile.ZipFile(local_archive, 'r') as zf:\n","        zf.extractall(extract_dir)\n","elif suffix == \".7z\":\n","    extract_7z(local_archive, extract_dir)\n","else:\n","    raise ValueError(f\"Định dạng không hỗ trợ: {suffix}. Hỗ trợ .zip hoặc .7z\")\n","\n","# 5) Tuỳ chọn: xóa file nén sau khi giải nén\n","if DELETE_ARCHIVE_AFTER_EXTRACT:\n","    try:\n","        local_archive.unlink()\n","        print(f\"🧹 Đã xóa file nén: {local_archive}\")\n","    except Exception as e:\n","        print(f\"⚠️ Không xóa được file nén: {e}\")\n","\n","# 6) Liệt kê vài mục sau khi giải nén\n","print(\"🗂️  Một vài file/thư mục sau giải nén:\")\n","count = 0\n","for p in sorted(extract_dir.rglob('*')):\n","    rel = p.relative_to(extract_dir)\n","    print(\" -\", rel)\n","    count += 1\n","    if count >= 25:\n","        print(\" ... (đã rút gọn danh sách)\")\n","        break\n","\n","print(\"\\n🎉 Xong! Bạn có thể làm việc với dữ liệu tại:\", extract_dir)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qPyynYq55IeZ","executionInfo":{"status":"ok","timestamp":1760691064293,"user_tz":-420,"elapsed":91556,"user":{"displayName":"Lâm Đặng","userId":"17066101826048801505"}},"outputId":"0bd52f51-5b0c-4cf0-d880-2420082967a6"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["🔗 Mounting Google Drive...\n","Mounted at /content/drive\n","⬇️  Copy về Colab: /content/drive/MyDrive/IOT prj/merged_batches.7z -> /content/iot-prj/Data/Dataset/merged_batches.7z\n","✅ Đã copy: /content/iot-prj/Data/Dataset/merged_batches.7z (824.39 MB)\n","📦 Đang giải nén vào: /content/iot-prj/Data/Dataset\n","⏬ Cài py7zr ...\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m69.7/69.7 kB\u001b[0m \u001b[31m8.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m97.0/97.0 kB\u001b[0m \u001b[31m12.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m51.7/51.7 kB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m142.7/142.7 kB\u001b[0m \u001b[31m17.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m429.9/429.9 kB\u001b[0m \u001b[31m36.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h🧹 Đã xóa file nén: /content/iot-prj/Data/Dataset/merged_batches.7z\n","🗂️  Một vài file/thư mục sau giải nén:\n"," - merged_batches\n"," - merged_batches/batch_01.csv\n"," - merged_batches/batch_02.csv\n"," - merged_batches/batch_03.csv\n"," - merged_batches/batch_04.csv\n"," - merged_batches/batch_05.csv\n"," - merged_batches/batch_06.csv\n"," - merged_batches/batch_07.csv\n"," - merged_batches/batch_08.csv\n","\n","🎉 Xong! Bạn có thể làm việc với dữ liệu tại: /content/iot-prj/Data/Dataset\n"]}]},{"cell_type":"code","source":["!python ./iot-prj/src/dataset_full/scripts/03_train_colab_highmem.py\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TTxzguJz5IdT","executionInfo":{"status":"ok","timestamp":1760691469266,"user_tz":-420,"elapsed":404976,"user":{"displayName":"Lâm Đặng","userId":"17066101826048801505"}},"outputId":"5a7d402a-0d72-41c0-e112-ae89a3c2a6cc"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["================================================================================\n","TRAIN TWO-STAGE MODEL - COLAB PRO+ HIGH-RAM\n","================================================================================\n","XGBoost version: 3.0.5\n","🚀 GPU detected: NVIDIA L4, 23034 MiB\n","   💾 Current RAM usage: 0.22 GB\n","\n","================================================================================\n","1. CONFIGURATION\n","================================================================================\n","\n","📂 Detected Paths:\n","   Project root: /content/iot-prj\n","   Batch dir:    /content/iot-prj/Data/Dataset/merged_batches\n","   Model dir:    /content/iot-prj/models/full_dataset\n","   Stats file:   /content/iot-prj/src/dataset_full/stats/batch_statistics.json\n","\n","💡 Strategy:\n","   Train: batch_01 + batch_04 + batch_05 (30M records)\n","   Test:  batch_02 sampled (1M records)\n","   RAM:   Expected ~33 GB (fits in 52 GB)\n","\n","================================================================================\n","2. LOADING TRAINING DATA\n","================================================================================\n","\n","📂 Loading batch_01... ✅ 10,000,000 records\n","   💾 Current RAM usage: 2.84 GB\n","\n","📂 Loading batch_04... ✅ 10,000,000 records\n","   💾 Current RAM usage: 5.46 GB\n","\n","🔧 Merging 2 batches...\n","✅ Training data: 20,000,000 records\n","   💾 Current RAM usage: 8.07 GB\n","\n","================================================================================\n","3. LOADING TEST DATA\n","================================================================================\n","\n","📂 Loading batch_02... ✅ 10,000,000 records\n","\n","🔧 Sampling 300K from batch_02 (RAM optimized)...\n","✅ Test data: 300,000 records\n","   💾 Current RAM usage: 10.77 GB\n","\n","================================================================================\n","4. DATA EXPLORATION\n","================================================================================\n","\n","📊 Training Distribution:\n","   DoS            : 13,005,877 (65.03%)\n","   DDoS           : 5,163,128 (25.82%)\n","   Reconnaissance : 1,821,639 (9.11%)\n","   Normal         : 7,769 (0.04%)\n","   Theft          : 1,587 (0.01%)\n","\n","📊 Test Distribution:\n","   DoS            : 299,990 (100.00%)\n","   Normal         : 10 (0.00%)\n","\n","================================================================================\n","5. FEATURE ENGINEERING\n","================================================================================\n","\n","✅ Features: 21\n","\n","🔧 Handling missing values...\n","\n","🔧 Encoding categorical features...\n","   ✅ flgs: 13 classes\n","   ✅ proto: 7 classes\n","   ✅ state: 13 classes\n","\n","✅ Final features: 21\n","   💾 Current RAM usage: 8.97 GB\n","\n","================================================================================\n","STAGE 1: ATTACK vs NORMAL\n","================================================================================\n","\n","📊 Distribution:\n","   Train Normal: 7,769\n","   Train Attack: 19,992,231\n","   Test Normal:  10\n","   Test Attack:  299,990\n","\n","📊 Split: Train=17,000,000, Val=3,000,000, Test=300,000\n","\n","🔧 Applying SMOTE...\n","   ✅ 17,000,000 → 18,692,735\n","\n","🚀 Training Stage 1...\n","   Using: gpu_hist (GPU)\n","   ✅ Best iteration: 199, Score: 0.0002\n","\n","📊 Stage 1 Performance:\n","   Accuracy:  0.7508\n","   Precision: 1.0000\n","   Recall:    0.7508\n","   F1-Score:  0.8577\n","   ROC-AUC:   1.0000\n","   💾 Current RAM usage: 19.13 GB\n","\n","================================================================================\n","STAGE 2: ATTACK TYPE CLASSIFICATION\n","================================================================================\n","\n","📊 Attacks: Train=19,992,231, Test=299,990\n","\n","📊 Mapping:\n","   DDoS            → 0\n","   DoS             → 1\n","   Reconnaissance  → 2\n","\n","🔧 Applying SMOTE (limited sampling)...\n","   Class distribution before SMOTE:\n","      DDoS: 4,388,659\n","      DoS: 11,054,995\n","      Reconnaissance: 1,548,393\n","   ⚠️  Skipping SMOTE (minority too small or safe), using class weights instead\n","\n","🚀 Training Stage 2...\n","   Using: gpu_hist (GPU)\n","   Using balanced sample weights to handle class imbalance\n","   ✅ Best iteration: 173, Score: 0.0000\n","\n","📊 Stage 2 Performance:\n","   Accuracy:  1.0000\n","   Precision: 1.0000\n","   Recall:    1.0000\n","   F1-Score:  1.0000\n","\n","================================================================================\n","COMBINED PIPELINE EVALUATION\n","================================================================================\n","\n","🔮 Combining predictions (vectorized)...\n","   Processing 225,243 detected attacks...\n","   ✅ Batch prediction completed\n","\n","📊 Overall Accuracy: 0.750843 (75.08%)\n","\n","================================================================================\n","CONFUSION MATRIX (Detailed)\n","================================================================================\n","\n","                    Normal       DDoS        DoS Reconnaissance\n","───────────────────────────────────────────────────────────\n","Normal                  10          0          0          0\n","DDoS                     0          0          0          0\n","DoS                  74747          0     225243          0\n","Reconnaissance           0          0          0          0\n","\n","================================================================================\n","PER-CATEGORY ACCURACY\n","================================================================================\n","   Normal         : 1.000000 (100.00%) - 10/10\n","   DDoS           : 0.000000 (  0.00%) - 0/0\n","   DoS            : 0.750835 ( 75.08%) - 225,243/299,990\n","   Reconnaissance : 0.000000 (  0.00%) - 0/0\n","\n","================================================================================\n","PER-CATEGORY DETAILED METRICS\n","================================================================================\n","\n","   Normal:\n","      Precision: 0.000134\n","      Recall:    1.000000\n","      F1-Score:  0.000267\n","      Support:   10\n","\n","   DDoS:\n","      Precision: 0.000000\n","      Recall:    0.000000\n","      F1-Score:  0.000000\n","      Support:   0\n","\n","   DoS:\n","      Precision: 1.000000\n","      Recall:    0.750835\n","      F1-Score:  0.857688\n","      Support:   299,990\n","\n","   Reconnaissance:\n","      Precision: 0.000000\n","      Recall:    0.000000\n","      F1-Score:  0.000000\n","      Support:   0\n","\n","================================================================================\n","CLASSIFICATION REPORT\n","================================================================================\n","\n","                 precision    recall  f1-score   support\n","\n","        Normal     0.0001    1.0000    0.0003        10\n","          DDoS     0.0000    0.0000    0.0000         0\n","           DoS     1.0000    0.7508    0.8577    299990\n","Reconnaissance     0.0000    0.0000    0.0000         0\n","\n","      accuracy                         0.7508    300000\n","     macro avg     0.2500    0.4377    0.2145    300000\n","  weighted avg     1.0000    0.7508    0.8577    300000\n","\n","\n","================================================================================\n","SAVING MODELS\n","================================================================================\n","\n","✅ Models saved to: /content/iot-prj/models/full_dataset/\n","   • stage1_20251017_085746.pkl\n","   • stage2_20251017_085746.pkl\n","   • training_metrics_20251017_085746.json\n","\n","================================================================================\n","✅ TRAINING COMPLETED!\n","================================================================================\n","\n","📊 Final Accuracy: 0.7508\n","📂 Models: /content/iot-prj/models/full_dataset/\n","   💾 Current RAM usage: 29.91 GB\n","\n","💡 To generate visualizations (charts), run:\n","   python /content/iot-prj/src/dataset_full/scripts/05_visualize_results.py\n","   (This will read metrics from /content/iot-prj/models/full_dataset/training_metrics_20251017_085746.json)\n","\n","================================================================================\n"]}]},{"cell_type":"code","source":["!python ./iot-prj/src/dataset_full/scripts/04_evaluate_model.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ywR-hkNiGvfX","executionInfo":{"status":"ok","timestamp":1760694290873,"user_tz":-420,"elapsed":174014,"user":{"displayName":"Lâm Đặng","userId":"17066101826048801505"}},"outputId":"00fe98fc-e861-4374-e2cd-a31dfcf20881"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["================================================================================\n","STEP 4: COMPREHENSIVE MODEL EVALUATION\n","================================================================================\n","\n","📂 Paths:\n","   Model dir: /content/iot-prj/models/full_dataset\n","   Eval dir:  /content/iot-prj/results/evaluation\n","   Batch dir: /content/iot-prj/Data/Dataset/merged_batches\n","\n","================================================================================\n","1. LOADING MODELS\n","================================================================================\n","\n","📂 Found latest stage1 model: stage1_binary_20251017_115443.pkl\n","   Detected old format with suffix\n","   Timestamp: 20251017_115443\n","\n","📂 Loading model files...\n","   ✅ Loaded: stage1_binary_20251017_115443.pkl\n","   ✅ Loaded: stage2_multiclass_20251017_115443.pkl\n","   ✅ Loaded: label_encoder_20251017_115443.pkl\n","   ✅ Loaded: attack_mapping_20251017_115443.pkl\n","   ✅ Loaded: feature_columns_20251017_115443.pkl\n","✅ Loaded all model artifacts\n","   Features: 8\n","   Attack types: 3\n","\n","================================================================================\n","2. LOADING TEST DATA\n","================================================================================\n","\n","📂 Loading test data from batch_02...\n","✅ Loaded 10,000,000 records\n","\n","🔧 Sampling 1M for evaluation...\n","✅ Sampled to 1,000,000 records\n","\n","================================================================================\n","3. PREPROCESSING TEST DATA\n","================================================================================\n","✅ Selected 8 features\n","🔧 Encoding categorical features (single encoder for 'proto')...\n","   ✅ Encoded: proto\n","✅ Encoded 1 categorical features\n","\n","================================================================================\n","4. STAGE 1 EVALUATION - ATTACK vs NORMAL\n","================================================================================\n","\n","🚀 Running Stage 1 predictions...\n","✅ Stage 1 inference: 1.14s (876201 samples/sec)\n","\n","📊 Stage 1 Metrics:\n","   Accuracy:  0.988626 (98.86%)\n","   Precision: 0.999998\n","   Recall:    0.988628\n","   F1-Score:  0.994280\n","   ROC-AUC:   0.995165\n","\n","📊 Stage 1 Confusion Matrix:\n","                    Predicted\n","                Normal  Attack\n","   Actual Normal      32       2  (Total: 34)\n","   Actual Attack   11372  988594  (Total: 999,966)\n","\n","📊 Stage 1 Per-Class Metrics:\n","   Normal:\n","      Precision: 0.002806\n","      Recall:    0.941176\n","      Support:   34\n","   Attack:\n","      Precision: 0.999998\n","      Recall:    0.988628\n","      Support:   999,966\n","\n","================================================================================\n","5. STAGE 2 EVALUATION - ATTACK TYPE\n","================================================================================\n","\n","📊 Test data (attacks only): 999,966 samples\n","\n","🚀 Running Stage 2 predictions...\n","✅ Stage 2 inference: 1.60s (623852 samples/sec)\n","\n","📊 Stage 2 Metrics (Weighted):\n","   Accuracy:  0.934523 (93.45%)\n","   Precision: 1.000000\n","   Recall:    0.934523\n","   F1-Score:  0.966153\n","\n","📊 Stage 2 Confusion Matrix:\n","                      DDoS        DoS Reconnaissance\n","────────────────────────────────────────────────────────────────────────────────\n","DDoS                     0          0          0\n","DoS                  62513     934491       2962\n","Reconnaissance           0          0          0\n","\n","📊 Stage 2 Per-Class Metrics:\n","\n","   DDoS:\n","      Precision: 0.000000\n","      Recall:    0.000000\n","      F1-Score:  0.000000\n","      Support:   0\n","\n","   DoS:\n","      Precision: 1.000000\n","      Recall:    0.934523\n","      F1-Score:  0.966153\n","      Support:   999,966\n","\n","   Reconnaissance:\n","      Precision: 0.000000\n","      Recall:    0.000000\n","      F1-Score:  0.000000\n","      Support:   0\n","\n","================================================================================\n","6. COMBINED PIPELINE EVALUATION\n","================================================================================\n","\n","🚀 Running full pipeline (vectorized)...\n","   Processing 988,596 detected attacks...\n","   ✅ Batch prediction completed\n","✅ Full pipeline inference: 2.02s (494113 samples/sec)\n","\n","📊 Overall Pipeline Metrics:\n","   Overall Accuracy: 0.924390 (92.44%)\n","\n","📊 Overall Confusion Matrix:\n","                    Normal       DDoS        DoS Reconnaissance\n","────────────────────────────────────────────────────────────────────────────────────────────────────\n","Normal                  32          1          1          0\n","DDoS                     0          0          0          0\n","DoS                  11372      61289     924358       2947\n","Reconnaissance           0          0          0          0\n","\n","📊 Per-Category Accuracy:\n","   Normal         : 0.941176 ( 94.12%) - 32/34\n","   DDoS           : 0.000000 (  0.00%) - 0/0\n","   DoS            : 0.924389 ( 92.44%) - 924,358/999,966\n","   Reconnaissance : 0.000000 (  0.00%) - 0/0\n","\n","================================================================================\n","DETAILED CLASSIFICATION REPORT\n","================================================================================\n","\n","                 precision    recall  f1-score   support\n","\n","        Normal     0.0028    0.9412    0.0056        34\n","          DDoS     0.0000    0.0000    0.0000         0\n","           DoS     1.0000    0.9244    0.9607    999966\n","Reconnaissance     0.0000    0.0000    0.0000         0\n","\n","      accuracy                         0.9244   1000000\n","     macro avg     0.2507    0.4664    0.2416   1000000\n","  weighted avg     1.0000    0.9244    0.9607   1000000\n","\n","\n","================================================================================\n","7. SAVING EVALUATION RESULTS\n","================================================================================\n","\n","✅ Saved evaluation results:\n","   /content/iot-prj/results/evaluation/evaluation_20251017_094450.json\n","   /content/iot-prj/results/evaluation/evaluation_summary_20251017_094450.txt\n","\n","================================================================================\n","✅ EVALUATION COMPLETED\n","================================================================================\n","\n","📊 KEY METRICS:\n","   Stage 1 Accuracy:  0.9886 (98.86%)\n","   Stage 2 Accuracy:  0.9345 (93.45%)\n","   Overall Accuracy:  0.9244 (92.44%)\n","   Avg Latency:       0.00 ms/sample\n","   Throughput:        494113 samples/sec\n","\n","📂 Results saved to:\n","   /content/iot-prj/results/evaluation/\n","   • evaluation_20251017_094450.json\n","   • evaluation_summary_20251017_094450.txt\n","\n","================================================================================\n"]}]},{"cell_type":"code","source":["!python ./iot-prj/src/dataset_full/scripts/05_visualize_results.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oo8oqx9KGwOO","executionInfo":{"status":"ok","timestamp":1760691934044,"user_tz":-420,"elapsed":7531,"user":{"displayName":"Lâm Đặng","userId":"17066101826048801505"}},"outputId":"94032500-2d08-415a-932e-a1b7a648394f"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["================================================================================\n","GENERATE VISUALIZATIONS FROM TRAINING METRICS\n","================================================================================\n","\n","================================================================================\n","1. LOADING METRICS\n","================================================================================\n","\n","📂 Loading: training_metrics_20251017_085746.json\n","✅ Metrics loaded\n","   Timestamp: 20251017_085746\n","   Train samples: 20,000,000\n","   Test samples: 300,000\n","   Overall accuracy: 0.7508\n","\n","================================================================================\n","2. PREPARING DATA\n","================================================================================\n","✅ Data prepared\n","   Categories: Normal, DDoS, DoS, Reconnaissance\n","   Output dir: /content/iot-prj/models/full_dataset/visualizations_20251017_085746\n","\n","================================================================================\n","3. GENERATING VISUALIZATIONS\n","================================================================================\n","\n","📊 1. Confusion Matrix Heatmap...\n","   ✅ Saved: 01_confusion_matrix.png\n","📊 2. Normalized Confusion Matrix...\n","/content/./iot-prj/src/dataset_full/scripts/05_visualize_results.py:124: RuntimeWarning: invalid value encountered in divide\n","  cm_normalized = cm_overall.astype('float') / cm_overall.sum(axis=1)[:, np.newaxis]\n","   ✅ Saved: 02_confusion_matrix_normalized.png\n","📊 3. Per-Category Metrics...\n","   ✅ Saved: 03_per_category_metrics.png\n","📊 4. Stage Comparison...\n","   ✅ Saved: 04_stage_comparison.png\n","📊 5. Class Distribution...\n","   ✅ Saved: 05_class_distribution.png\n","📊 6. Accuracy vs Support...\n","/content/./iot-prj/src/dataset_full/scripts/05_visualize_results.py:269: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.\n","  ax1.set_xticklabels(categories, rotation=45, ha='right')\n","   ✅ Saved: 06_accuracy_vs_support.png\n","📊 7. Summary Dashboard...\n","   ✅ Saved: 00_summary_dashboard.png\n","\n","================================================================================\n","✅ VISUALIZATION COMPLETED!\n","================================================================================\n","\n","📊 Generated 7 visualizations:\n","   • 00_summary_dashboard.png (Overview)\n","   • 01_confusion_matrix.png\n","   • 02_confusion_matrix_normalized.png\n","   • 03_per_category_metrics.png\n","   • 04_stage_comparison.png\n","   • 05_class_distribution.png\n","   • 06_accuracy_vs_support.png\n","\n","📂 Saved to: /content/iot-prj/models/full_dataset/visualizations_20251017_085746/\n","\n","================================================================================\n"]}]},{"cell_type":"code","source":["!zip -r /content/model.zip /content/iot-prj/models/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qy7cmKSLZUG-","executionInfo":{"status":"ok","timestamp":1760694426805,"user_tz":-420,"elapsed":406,"user":{"displayName":"Lâm Đặng","userId":"17066101826048801505"}},"outputId":"63ec09f5-1fcb-4d1a-e3e1-1672bf0f850c"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["updating: content/iot-prj/models/ (stored 0%)\n","updating: content/iot-prj/models/hierarchical_overview_5pct_20251017_102314.png (deflated 23%)\n","updating: content/iot-prj/models/confusion_matrix_5pct_20251017_102314.png (deflated 24%)\n","updating: content/iot-prj/models/hierarchical_overview.png (deflated 23%)\n","updating: content/iot-prj/models/full_dataset/ (stored 0%)\n","updating: content/iot-prj/models/full_dataset/metrics_20251017_114223.json (deflated 59%)\n","updating: content/iot-prj/models/full_dataset/label_encoder_20251017_115443.pkl (deflated 35%)\n","updating: content/iot-prj/models/full_dataset/stage2_multiclass_20251017_115443.pkl (deflated 67%)\n","updating: content/iot-prj/models/full_dataset/stage2_20251017_085746.pkl (deflated 83%)\n","updating: content/iot-prj/models/full_dataset/stage2_multiclass_20251017_114223.pkl (deflated 67%)\n","updating: content/iot-prj/models/full_dataset/stage1_binary_20251017_114223.pkl (deflated 67%)\n","updating: content/iot-prj/models/full_dataset/feature_columns_20251017_114223.pkl (deflated 14%)\n","updating: content/iot-prj/models/full_dataset/label_encoder_20251017_114223.pkl (deflated 35%)\n","updating: content/iot-prj/models/full_dataset/metrics_20251017_115443.json (deflated 60%)\n","updating: content/iot-prj/models/full_dataset/features_20251017_085746.pkl (deflated 33%)\n","updating: content/iot-prj/models/full_dataset/encoders_20251017_085746.pkl (deflated 54%)\n","updating: content/iot-prj/models/full_dataset/attack_mapping_20251017_114223.pkl (deflated 5%)\n","updating: content/iot-prj/models/full_dataset/stage1_binary_20251017_115443.pkl (deflated 67%)\n","updating: content/iot-prj/models/full_dataset/attack_mapping_20251017_115443.pkl (deflated 12%)\n","updating: content/iot-prj/models/full_dataset/training_metrics_20251017_085746.json (deflated 72%)\n","updating: content/iot-prj/models/full_dataset/mapping_20251017_085746.pkl (deflated 12%)\n","updating: content/iot-prj/models/full_dataset/visualizations_20251017_085746/ (stored 0%)\n","updating: content/iot-prj/models/full_dataset/visualizations_20251017_085746/02_confusion_matrix_normalized.png (deflated 22%)\n","updating: content/iot-prj/models/full_dataset/visualizations_20251017_085746/04_stage_comparison.png (deflated 29%)\n","updating: content/iot-prj/models/full_dataset/visualizations_20251017_085746/06_accuracy_vs_support.png (deflated 17%)\n","updating: content/iot-prj/models/full_dataset/visualizations_20251017_085746/05_class_distribution.png (deflated 27%)\n","updating: content/iot-prj/models/full_dataset/visualizations_20251017_085746/00_summary_dashboard.png (deflated 18%)\n","updating: content/iot-prj/models/full_dataset/visualizations_20251017_085746/03_per_category_metrics.png (deflated 28%)\n","updating: content/iot-prj/models/full_dataset/visualizations_20251017_085746/01_confusion_matrix.png (deflated 28%)\n","updating: content/iot-prj/models/full_dataset/feature_columns_20251017_115443.pkl (deflated 14%)\n","updating: content/iot-prj/models/full_dataset/stage1_20251017_085746.pkl (deflated 68%)\n","updating: content/iot-prj/models/hierarchical_confusion_matrix.png (deflated 25%)\n"]}]},{"cell_type":"code","source":["!zip -r /content/evaluation.zip /content/iot-prj/results/evaluation/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oAuCJ2hUhlNh","executionInfo":{"status":"ok","timestamp":1760694451146,"user_tz":-420,"elapsed":108,"user":{"displayName":"Lâm Đặng","userId":"17066101826048801505"}},"outputId":"3166502d-9348-4257-9aab-e751bf0d441c"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["updating: content/iot-prj/results/evaluation/ (stored 0%)\n","  adding: content/iot-prj/results/evaluation/evaluation_summary_20251017_094450.txt (deflated 71%)\n","  adding: content/iot-prj/results/evaluation/evaluation_20251017_094450.json (deflated 71%)\n"]}]}]}